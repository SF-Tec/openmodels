name: OpenModels CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Print versions
        run: |
          echo "Python version:"
          python --version
          echo "Black version:"
          poetry run black --version

      - name: Run tests
        run: poetry run pytest

      - name: Run type checking
        run: poetry run mypy openmodels

      - name: Run formatting
        run: |
          poetry run black openmodels
          git diff --exit-code

      - name: Run linting
        run: |
          poetry run black --check openmodels
          poetry run flake8 openmodels

      - name: Check for leftover debug print statements
        run: |
          if grep -r "print(" openmodels; then
            echo "Warning: Found print statements in the code. Please remove them before merging."
            exit 1
          fi

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Build package
        run: poetry build

      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  publish-test:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish package to TestPyPI
        env:
          TEST_PYPI_API_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry publish --repository testpypi --username __token__ --password $TEST_PYPI_API_TOKEN

  update-badge:
    needs: publish-test
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Get TestPyPI version
        run: |
          VERSION=$(curl -s https://test.pypi.org/pypi/openmodels/json | jq -r .info.version) || exit 1
          if [ -z "$VERSION" ] || [ "$VERSION" = "null" ]; then
            echo "Error: Could not fetch version from TestPyPI." >&2
            exit 1
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Write Shields JSON
        run: |
          cat > testpypi-badge.json <<EOF
          {
            "schemaVersion": 1,
            "label": "TestPyPI",
            "message": "${VERSION}",
            "color": "orange"
          }
          EOF

      - name: Commit badge JSON
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add testpypi-badge.json
          git commit -m "Update TestPyPI badge to ${VERSION} [skip ci]" || echo "No changes"
          git push
